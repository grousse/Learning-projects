type: edu
custom_name: stage5
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
        runtimeOnly 'com.h2database:h2'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.CommandLineRunner;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.context.annotation.Bean;

    import java.util.ArrayList;
    import java.util.List;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

        @Bean
        public static CommandLineRunner runApplication(QuizRepository quizRepository) {
            return (args -> {


                for (Quiz q : quizRepository.findAll()) {

                }
            });
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=9090
    management.endpoints.web.exposure.include=*

    management.endpoint.shutdown.enabled=true
    spring.datasource.url=jdbc:h2:file:../quizdb
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=a

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false
    spring.jpa.show-sql=true
  learner_created: false
- name: src/engine/Quiz.java
  visible: true
  text: |-
    package engine;

    import com.fasterxml.jackson.annotation.JsonInclude;
    import org.springframework.context.annotation.Configuration;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;
    import java.util.ArrayList;
    import java.util.List;

    @Configuration
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Entity
    public class Quiz {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;
        @NotEmpty
        @Column
        private String title;
        @NotEmpty
        @Column
        private String text;
        @Size(min = 2)

        @Transient
        private List<String> options;
        @Transient
        private List<Integer> answer = new ArrayList<>();



        public Quiz() {
        }

        public Quiz(Long id, String title, String text) {
            this.id = id;
            this.title = title;
            this.text = text;
        }

        public Quiz(Long id, String title, String text, List<String> options, List<Integer> answer) {
            this.id = id;
            this.title = title;
            this.text = text;
            this.options = options;
            this.answer = answer;
        }


        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public List<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }

        public List<String> getOptions() {
            return options;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        @Override
        public String toString() {
            return "Quiz{" +
                    "id=" + id +
                    ", title='" + title + '\'' +
                    ", text='" + text + '\'' +
                    ", options=" + options +
                    ", answer=" + answer +
                    '}';
        }
    }
  learner_created: false
- name: src/engine/QuizResult.java
  visible: true
  text: |-
    package engine;

    public class QuizResult {
        public final static QuizResult SUCCESSFUL = new QuizResult(true);
        public final static QuizResult FAILED = new QuizResult(false);

        private final boolean success;
        private final String feedback;

        private QuizResult(boolean isSuccessful) {
            success = isSuccessful;
            feedback = success ? "Congratulations, you are right!" : "Wrong answer! Please, try again.";
        }

        public boolean getSuccess() {
            return success;
        }

        public String getFeedback() {
            return feedback;
        }
    }
  learner_created: false
- name: src/engine/QuizAnswer.java
  visible: true
  text: |-
    package engine;

    import java.util.ArrayList;
    import java.util.List;

    public class QuizAnswer {
        private List<Integer> answer;

        public QuizAnswer() {
            answer = new ArrayList<>();
        }

        public QuizAnswer(List<Integer> answer) {
            this.answer = answer;
        }

        public List<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }
    }
  learner_created: false
- name: src/engine/QuizRepository.java
  visible: true
  text: |
    package engine;

    import org.springframework.data.repository.CrudRepository;

    public interface QuizRepository extends CrudRepository<Quiz, Long> {



    }
  learner_created: false
- name: src/engine/QuizService.java
  visible: true
  learner_created: true
- name: src/engine/QuizController.java
  visible: true
  learner_created: true
- name: src/engine/NoSuchQuizException.java
  visible: true
  learner_created: true
- name: test/tests/WebQuizEngineTest.java
  visible: true
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(0),
            () -> testQuizExists(0),
            () -> testQuizNotExists(0),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizIds[0], "[0]", false),
            () -> checkQuizSuccess(quizIds[0], "[1]", false),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),

            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),
            () -> checkQuizSuccess(quizIds[1], "[2]", false),
            () -> checkQuizSuccess(quizIds[1], "[3]", false),

            () -> testAllQuizzes(2),
            this::reloadServer,
            () -> testAllQuizzes(2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),
            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),

            () -> addIncorrectQuiz(error400noTitle),
            () -> addIncorrectQuiz(error400emptyTitle),
            () -> addIncorrectQuiz(error400noText),
            () -> addIncorrectQuiz(error400emptyText),
            () -> addIncorrectQuiz(error400noOptions),
            () -> addIncorrectQuiz(error400emptyOptions),
            () -> addIncorrectQuiz(error400oneOption),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),
            () -> checkQuizSuccess(quizIds[2], "[]", false),
            () -> checkQuizSuccess(quizIds[2], "[0]", false),
            () -> checkQuizSuccess(quizIds[2], "[1]", false),
            () -> checkQuizSuccess(quizIds[2], "[2]", false),
            () -> checkQuizSuccess(quizIds[2], "[3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false),

            () -> testCreateQuiz(3),
            () -> testQuizExists(3),
            () -> testQuizNotExists(3),
            () -> checkQuizSuccess(quizIds[3], "[]", false),
            () -> checkQuizSuccess(quizIds[3], "[0]", false),
            () -> checkQuizSuccess(quizIds[3], "[1]", false),
            () -> checkQuizSuccess(quizIds[3], "[2]", false),
            () -> checkQuizSuccess(quizIds[3], "[3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false),

            () -> testCreateQuiz(4),
            () -> testQuizExists(4),
            () -> testQuizNotExists(4),
            () -> checkQuizSuccess(quizIds[4], "[]", true),
            () -> checkQuizSuccess(quizIds[4], "[0]", false),
            () -> checkQuizSuccess(quizIds[4], "[1]", false),
            () -> checkQuizSuccess(quizIds[4], "[2]", false),
            () -> checkQuizSuccess(quizIds[4], "[3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false),

            () -> testCreateQuiz(5),
            () -> testQuizExists(5),
            () -> testQuizNotExists(5),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[5], "[1]", false),
            () -> checkQuizSuccess(quizIds[5], "[2]", false),
            () -> checkQuizSuccess(quizIds[5], "[3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false),

            () -> testCreateQuiz(6),
            () -> testQuizExists(6),
            () -> testQuizNotExists(6),
            () -> checkQuizSuccess(quizIds[6], "[]", false),
            () -> checkQuizSuccess(quizIds[6], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[1]", false),
            () -> checkQuizSuccess(quizIds[6], "[2]", false),
            () -> checkQuizSuccess(quizIds[6], "[3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false),

            () -> testAllQuizzes(7),
            this::reloadServer,
            () -> testAllQuizzes(7),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + 125);
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quiz).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/91/stages/508/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nGET /api/quizzes should respond with status\
    \ code 200, responded: 401\n\nResponse body:\n\n{&quot;timestamp&quot;:&quot;2021-07-01T18:29:48.501+0000&quot;,&quot;status&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Unauthorized&quot;,&quot;path&quot;:&quot;/api/quizzes&quot;}\n\
    \nPlease find below the output of your program during this failed test.\n\n---\n\
    \n\n  .   ____          _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __\
    \  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\\
    \ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_|\
    \ |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot\
    \ ::        (v2.2.2.RELEASE)\n\n2021-07-01 20:29:43.548  INFO 6888 --- [    Test\
    \ worker] engine.WebQuizEngine                     : Starting WebQuizEngine on\
    \ DESKTOP-9MJNA4D with PID 6888 (started by erikj in D:\\Web Quiz Engine\\Web\
    \ Quiz Engine\\task)\n2021-07-01 20:29:43.553  INFO 6888 --- [    Test worker]\
    \ engine.WebQuizEngine                     : No active profile set, falling back\
    \ to default profiles: default\n2021-07-01 20:29:44.612  INFO 6888 --- [    Test\
    \ worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data\
    \ JPA repositories in DEFAULT mode.\n2021-07-01 20:29:44.665  INFO 6888 --- [\
    \    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data\
    \ repository scanning in 44ms. Found 1 JPA repository interfaces.\n2021-07-01\
    \ 20:29:45.001  INFO 6888 --- [    Test worker] trationDelegate$BeanPostProcessorChecker\
    \ : Bean &#39;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&#39;\
    \ of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration]\
    \ is not eligible for getting processed by all BeanPostProcessors (for example:\
    \ not eligible for auto-proxying)\n2021-07-01 20:29:45.264  INFO 6888 --- [  \
    \  Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized\
    \ with port(s): 9090 (http)\n2021-07-01 20:29:45.291  INFO 6888 --- [    Test\
    \ worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n\
    2021-07-01 20:29:45.292  INFO 6888 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.29]\n2021-07-01 20:29:45.415\
    \  INFO 6888 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2021-07-01 20:29:45.415\
    \  INFO 6888 --- [    Test worker] o.s.web.context.ContextLoader            :\
    \ Root WebApplicationContext: initialization completed in 1819 ms\n2021-07-01\
    \ 20:29:45.536  INFO 6888 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2021-07-01 20:29:45.759  INFO 6888 --- [\
    \    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start\
    \ completed.\n2021-07-01 20:29:45.768  INFO 6888 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../quizdb&#39;\n\
    2021-07-01 20:29:46.017  INFO 6888 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2021-07-01 20:29:46.114\
    \  INFO 6888 --- [    Test worker] org.hibernate.Version                    :\
    \ HHH000412: Hibernate Core {5.4.9.Final}\n2021-07-01 20:29:46.318  INFO 6888\
    \ --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001:\
    \ Hibernate Commons Annotations {5.1.0.Final}\n2021-07-01 20:29:46.442  INFO 6888\
    \ --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400:\
    \ Using dialect: org.hibernate.dialect.H2Dialect\nHibernate: create table quiz\
    \ (id bigint not null, answer binary(255), options binary(255), text varchar(255),\
    \ title varchar(255), primary key (id))\nHibernate: create sequence hibernate_sequence\
    \ start with 1 increment by 1\n2021-07-01 20:29:47.105  INFO 6888 --- [    Test\
    \ worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform\
    \ implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2021-07-01 20:29:47.114  INFO 6888 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2021-07-01 20:29:47.434  WARN 6888 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration\
    \ : spring.jpa.open-in-view is enabled by default. Therefore, database queries\
    \ may be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2021-07-01 20:29:47.536  INFO 6888 --- [    Test worker]\
    \ o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n\
    2021-07-01 20:29:47.830  INFO 6888 --- [    Test worker] .s.s.UserDetailsServiceAutoConfiguration\
    \ : \n\nUsing generated security password: ac35fc9c-6443-4cf6-8af4-47ae1ac0224d\n\
    \n2021-07-01 20:29:47.915  INFO 6888 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7aca4cd1,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@6258e9ea,\
    \ org.springframework.security.web.header.HeaderWriterFilter@4dea01c9, org.springframework.security.web.csrf.CsrfFilter@294c2b7f,\
    \ org.springframework.security.web.authentication.logout.LogoutFilter@59535e07,\
    \ org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@b7051ff,\
    \ org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@56263ded,\
    \ org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@4f705240,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@182212d9,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@69d549b9,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@98af5,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@f96fb49,\
    \ org.springframework.security.web.session.SessionManagementFilter@3ead8c5e, org.springframework.security.web.access.ExceptionTranslationFilter@7b32d672,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@48084fbc]\n\
    2021-07-01 20:29:47.948  INFO 6888 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2021-07-01\
    \ 20:29:48.009  INFO 6888 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 9090 (http) with context path &#39;&#39;\n2021-07-01\
    \ 20:29:48.012  INFO 6888 --- [    Test worker] engine.WebQuizEngine         \
    \            : Started WebQuizEngine in 4.816 seconds (JVM running for 5.639)\n\
    2021-07-01 20:29:48.357  INFO 6888 --- [nio-9090-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;\n\
    2021-07-01 20:29:48.358  INFO 6888 --- [nio-9090-exec-1] o.s.web.servlet.DispatcherServlet\
    \        : Initializing Servlet &#39;dispatcherServlet&#39;\n2021-07-01 20:29:48.369\
    \  INFO 6888 --- [nio-9090-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Completed initialization in 11 ms"
  time: Thu, 01 Jul 2021 18:29:49 UTC
record: 5
